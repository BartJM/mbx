#!/bin/bash
set -e

ROOT="$( cd "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
mkdir -p $ROOT/boxes
touch $ROOT/boxes/boxes.list
export LIBVIRT_DEFAULT_URI="qemu:///system"
echo MonkeyBox üêµ v0.01

usage() {
  echo "Available commands are:"
  echo "   init: initialises monkeynet and mbx templates"
  echo "   build: builds packages from git repo and sha/tag/branch"
  echo "   list: lists available environments"
  echo "   deploy: deploys QA env with two monkeybox VMs, configures storage, creates marvin cfg file"
  echo "   launch: launches QA env zone using environment's marvin cfg file"
  echo "   test: start marvin tests"
  echo "   dev: deploys dev env with a single monkeybox VM, configures storage, creates marvin cfg file"
  echo "   agentscp: updates KVM agent in dev environment using scp and restarts it"
  echo "   ssh: ssh into a mbx VM"
  echo "   stop: stop all env VMs"
  echo "   start: start all env VMs"
  echo "   destroy: destroy environment"
}

build() {
  if [[ "$1" == "-h" ]]; then
    echo "Usage: mbx build <repo url> <tag|sha|branch name|pr number> <option distro: centos6/7/8/debian>"
    exit 0
  fi

  url="${1:-apache/cloudstack}"
  echo $url | egrep "^https?://" || url="https://github.com/$url"
  tag="${2:-master}"
  distro="${3:-centos7}"

  re='^[0-9]+$'
  [[ $tag =~ $re ]] && pr_id=$tag && output_dir="${output_dir:=/export/testing/builds/pr/$tag/$distro}"
  output_dir="${output_dir:=/export/testing/builds/$tag/$distro}"

  ROOT=`pwd`
  uuid=`uuid`
  packaging_dir="/tmp/mbx/cloudstack/$uuid"

  echo "Pulling $url:$tag to $packaging_dir"
  mkdir -p $packaging_dir
  cd $packaging_dir

  git init $(pwd)
  git fetch --tags --progress $url --depth 1 +refs/heads/*:refs/remotes/origin/* > /dev/null
  git config remote.origin.url $url
  git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/*

  cd $ROOT

  # TODO: Build all simultaniously
  case "$distro" in
    centos6) image_name="bhaisaab/centos6-cloudstack-slave";;
    centos7) image_name="bhaisaab/centos7-cloudstack-slave";;
    centos8) image_name="bhaisaab/centos8-cloudstack-slave";;
    debian) image_name="bhaisaab/ubuntu-cloudstack-slave";;
    *) echo "Unknown distro" && exit 1;;
  esac

  echo "Pulling docker build container image $image_name"
  docker pull $image_name

  echo "Building packages for $distro"
  uuid=`uuid`
  container_name="builder-$uuid"

  sudo rm -rf $output_dir

  docker run -d -v $packaging_dir:/jenkins -v $output_dir:/output  --name $container_name $image_name /usr/sbin/sshd -D -p 22
  builder_ip=`docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $container_name `

  sshpass -p 'P@ssword123' scp -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" files/build.sh root@$builder_ip://jenkins/build.sh
  sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$builder_ip \
    PR_ID=$pr_id ACS_BRANCH=$tag DISTRO=$distro bash -x /jenkins/build.sh

  echo "Packages can be found at $output_dir"

  docker kill $container_name
  docker rm $container_name
  sudo rm -rf $packaging_dir
}

init() {
  if virsh net-list --all --name | grep -q monkeynet;
  then
    echo "'monkeynet' network is already defined, skipped re-initialisation";
  else
    virsh net-define $ROOT/monkeynet.xml
    virsh net-autostart monkeynet
    virsh net-start monkeynet
  fi
  echo "Setting up mbx sudoers file. Please enter sudoer password if you're prompted."
  sudo cp $ROOT/files/sudoer.mbx /etc/sudoers.d/mbx
  echo "Updating templates"
  for template in $(cat $ROOT/templates/md5sum.txt | awk '{print $2}' | sed 's/.qcow2//g'); do
    virsh undefine mbxt-$template >/dev/null 2>/dev/null || true
    echo "Updating template: $template"
    wget --show-progress -nc https://download.cloudstack.org/templates/mbx/$template.qcow2 -O $ROOT/templates/$template.qcow2 || true
    virsh define $ROOT/templates/xmls/mbxt-$template.xml >/dev/null
  done
  echo "Running md5 checksum checks on templates (this may take some time...)"
  (cd $ROOT/templates && md5sum --check md5sum.txt)
}

list() {
  echo
  for env in $(cat $ROOT/boxes/boxes.list); do
    echo -e "Name: \033[4m$env\033[0m"
    for vm in $(cat $ROOT/boxes/$env/list); do
      ip=$(getent hosts $vm | awk '{ print $1 }')
      url=""
      if [[ $vm == *"mgmt"* ]]; then
        url="http://$ip:8080/client"
      fi
      echo -e "$vm\t$ip\t$url"
      if [[ $vm == *vmw-host1* ]]; then
        vcip=$(sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$vm vim-cmd "vmsvc/get.guest 1 | grep ipAddress | head -1 | sed 's/.*ipAddress = \"//g' | sed 's/\".*//g'" 2> /dev/null) || true
        echo -e "VC (photon-machine)\t\t\t$vcip\thttps://$vcip/"
      fi
    done
    echo
    options+=($env)
  done
  if [ ${#options[@]} -eq 0 ]; then
    echo "No mbx environments found"
  fi
  echo "Following mbx templates are available:"
  virsh list --all | grep mbxt- | awk '{print $2}'
}

check_mbxt() {
  if ! virsh list --all | grep mbxt-| grep -q $2; then
    echo "Provided $1 template $2 not found, run 'mbx list' to see list of valid templates"
    exit 1
  fi
}

deploy() {
  if [[ "$1" == "-h" ]]; then
    echo "Usage: mbx deploy <name of env> <mgmt server template> <hypervisor template> <repo> <storage source>"
    exit 0
  fi

  set -x

  id=
  for idx in {1..9}; do
    if ! grep -q qa$idx- $ROOT/boxes/boxes.list; then
      id=$idx
      break
    fi
  done
  if [ -z $id ]; then
    echo "Unable to deploy an env, all 20 slots full"
    exit 1
  fi

  name=${1:-"mbxe"}
  mst=${2:-"mbxt-kvm-centos7"}
  hyt=${3:-"mbxt-kvm-centos7"}
  # Validate input templates
  check_mbxt mgmt $mst
  check_mbxt hypervisor $hyt

  hypervisor=$(echo $hyt |  awk '{print substr($0,6,3)}')
  repo=${4:-"http://packages.shapeblue.com/cloudstack/upstream/centos7/4.15"}
  storage=${5:-"/export/testing/4.15"}
  uuid=$(cat /proc/sys/kernel/random/uuid | sed 's/-.*//g')
  env="qa$id-$name-$uuid-$hypervisor"

  echo -e "Building env with name: \033[4m$env\033[0m"
  echo "Management server template: $mst"
  echo "Hypervisor template: $hyt"
  echo "Repository: $repo"
  echo "Storage source: $storage"

  mkdir -p $ROOT/boxes/$env
  # Save env name
  echo $env >> $ROOT/boxes/boxes.list

  # Clone mgmt server
  virt-clone --original $mst --name $env-mgmt1 --file $ROOT/boxes/$env/$env-mgmt1.qcow2
  echo $env-mgmt1 >> $ROOT/boxes/$env/list
  virsh setmaxmem $env-mgmt1 4G --config

  # Clone hypervisor host1
  virt-clone --original $hyt --name $env-host1 --file $ROOT/boxes/$env/$env-host1.qcow2
  echo $env-host1 >> $ROOT/boxes/$env/list
  virsh setmaxmem $env-host1 8G --config
  if [[ "$hypervisor" == "vmw" ]]; then
    # VC runs on 1st ESXi host
    virsh setmaxmem $env-host1 18G --config
  fi

  # Clone hypervisor host2
  if [[ "$hyt" != "mbxt-vmware70u1" ]]; then
    virt-clone --original $hyt --name $env-host2 --file $ROOT/boxes/$env/$env-host2.qcow2
    echo $env-host2 >> $ROOT/boxes/$env/list
    virsh setmaxmem $env-host2 8G --config
  fi

  echo "Starting VMs"
  for domain in $(cat $ROOT/boxes/$env/list); do virsh start $domain; done;

  echo "Copying primary and secondary storages"
  env_storage="/export/testing/$env/"
  sudo cp -vr $storage $env_storage
  sync
  echo "Primary and secondary storages are ready"

  echo "Initialising environment hosts"
  sleep 30
  for box in $(cat $ROOT/boxes/$env/list); do
    echo "Configuring host $box"
    ip=$(getent hosts $box | awk '{ print $1 }')
    while [ -z $ip ]; do
      echo "Waiting for $box DHCP to kick-in..."
      sleep 10
      ip=$(getent hosts $box | awk '{ print $1 }')
    done
    while ! nc -vzw 10 $ip 22 2>&1 > /dev/null; do echo "Waiting for ssh on $box ($ip) to come up"; sleep 10; done
    echo "$box is UP"
    sleep 5

    # KVM and mgmt server
    if [[ "$hypervisor" == "kvm" || "$hypervisor" == "xen" || "$hypervisor" == "xcp" || "$box" == "$env-mgmt1" ]]; then
      sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$box hostnamectl set-hostname $box
      sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$box "echo $ip $box >> /etc/hosts"
      sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$box "cat /etc/hosts"
      echo "$box hostname fixed"
    fi

    # VMware: Start VC
    if [[ "$hypervisor" == "vmw" && "$box" == "$env-host1" ]]; then
      sleep 30
      vcmac=$( (date; cat /proc/interrupts) | md5sum | sed -r 's/^(.{4}).*$/\1/;s/([0-9a-f]{2})/\1:/g;s/^/00:50:56:00:/;s/:$//' )
      if [[ "$hyt" == "mbxt-vmware70u1" ]]; then
        sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$box "echo 'ethernet0.addressType = \"static\"' >> /vmfs/volumes/datastore1/VC/VC.vmx"
        sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$box "echo 'ethernet0.address = \"${vcmac}\"' >> /vmfs/volumes/datastore1/VC/VC.vmx"
      fi
      sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$box vim-cmd vmsvc/getallvms
      sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$box vim-cmd vmsvc/power.on 1
      echo "VC started"
    fi
    if [[ "$hypervisor" == "vmw" && "$box" == "$env-host2" ]]; then
      sleep 10
      sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$box vim-cmd vmsvc/unregister 1
      sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$box vim-cmd vmsvc/getallvms
      sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$box vim-cmd hostsvc/datastore/remove datastore1
      echo "VC and datastore1 on other ESXi host cleaned"
    fi

    # XenServer: Make hosts unique
    if [[ "$hypervisor" == "xen" || "$hypervisor" == "xcp" ]]; then
      if [[ "$box" == "$env-host1" ]]; then
        sleep 30 # wait for xapi to come up
        sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$box "xe host-param-set uuid=\$(xe host-list params=uuid|awk {'print \$5'} | head -n 1) name-label=$env-host1"
      fi
      if [[ "$box" == "$env-host2" ]]; then
        sshpass -p 'P@ssword123' scp -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" $ROOT/files/xenfix.sh root@$box:/root/
        sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" -o "ServerAliveInterval 2" root@$box "bash -x /root/xenfix.sh" || true
      fi
    fi
  done

  # Setup Management Server
  msip=$(getent hosts $env-mgmt1 | awk '{ print $1 }')
  # Fix CentOS7 repo
  sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$msip "sed -i '/^baseurl=.*/d' /etc/yum.repos.d/cloudstack.repo && echo baseurl=$repo >> /etc/yum.repos.d/cloudstack.repo"
  sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$msip systemctl enable --now mariadb
  sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$msip pip3 install --upgrade pip
  sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$msip yum install -y cloudstack-management cloudstack-usage cloudstack-common cloudstack-integration-tests cloudstack-marvin
  sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$msip "cloudstack-setup-databases cloud:cloud@localhost --deploy-as=root: -i $msip"
  sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$msip "mysql -u root --execute=\"INSERT INTO cloud.configuration (category, instance, component, name, value) VALUES ('Advanced', 'DEFAULT', 'management-server', 'integration.api.port', '8096');\""
  sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$msip cloudstack-setup-management

  # Setup KVM hosts
  if [[ $hypervisor == "kvm" ]]; then
    # Fix CentOS7 repo
    sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$env-host1 "sed -i '/^baseurl=.*/d' /etc/yum.repos.d/cloudstack.repo && echo baseurl=$repo >> /etc/yum.repos.d/cloudstack.repo"
    sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$env-host1 yum install -y cloudstack-agent
    sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$env-host1 "echo host.reserved.mem.mb=512 >> /etc/cloudstack/agent/agent.properties"
    # Fix CentOS7 repo
    sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$env-host2 "sed -i '/^baseurl=.*/d' /etc/yum.repos.d/cloudstack.repo && echo baseurl=$repo >> /etc/yum.repos.d/cloudstack.repo"
    sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$env-host2 yum install -y cloudstack-agent
    sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$env-host2 "echo host.reserved.mem.mb=512 >> /etc/cloudstack/agent/agent.properties"
  fi

  # Setup xen/xcp hosts
  if [[ $hypervisor == "xen" || $hypervisor == "xcp" ]]; then
    masterip=$(getent hosts $env-host1 | awk '{ print $1 }')
    sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$env-host1 "xe pool-param-set name-label=${env}1 uuid=\$(xe pool-list --minimal)"
    sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$env-host2 "xe pool-join master-address=${masterip} master-username=root master-password=P@ssword123"
  fi

  # Generate marvin config
  msip=$(getent hosts $env-mgmt1 | awk '{ print $1 }')
  export vlan="$(echo $id*100|bc)-$(echo $id*100+99|bc)"
  export public_start="172.20.$id.1"
  export public_end="172.20.$id.125"
  export pod_start="172.20.$id.126"
  export pod_end="172.20.$id.250"
  export host1=$(getent hosts $env-host1 | awk '{ print $1 }')
  export host2=$(getent hosts $env-host2 | awk '{ print $1 }')
  export storage_path="/export/testing/$env"

  if [[ $hypervisor == "xcp" ]]; then
    hypervisor="xen"
  fi

  # Find VC IP
  export vcip=
  if [[ $hypervisor == "vmw" ]]; then
    while : ; do
      vcip=$(sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$env-host1 vim-cmd "vmsvc/get.guest 1 | grep ipAddress | head -1 | sed 's/.*ipAddress = \"//g' | sed 's/\".*//g'")
      if [[ "$vcip" == *"unset"* ]]; then
        echo "Waiting for VC to be UP"
        sleep 5
      else
        echo "VC IP found: $vcip"
        break
      fi
    done
    while [[ "$(curl -sL -w '%{http_code}' https://${vcip}/sdk/vimService.wsdl --insecure -o /dev/null)" != "200" ]]; do
      echo "Waiting for VC vim service to be UP"
      sleep 5
    done
    # Check vim service and add hosts cluster
    $ROOT/files/govc cluster.add -k=true -u=https://administrator@vsphere.local:P@ssword123@$vcip/sdk -cluster "/DC/host/Cluster" -noverify -force -hostname $host1 -username root -password P@ssword123
    if [[ "$hyt" != "mbxt-vmware70u1" ]]; then
      $ROOT/files/govc cluster.add -k=true -u=https://administrator@vsphere.local:P@ssword123@$vcip/sdk -cluster "/DC/host/Cluster" -noverify -force -hostname $host2 -username root -password P@ssword123
    fi
    echo "Before launching zone, open the VC web UI and reset any warning on the ESXi hosts by clicking 'Reset to Green'"
  fi

  envsubst < $ROOT/marvin/$hypervisor.cfg > $ROOT/boxes/$env/marvin.cfg
  echo "VMs deployed and marvin config generated, to launch zone run 'mbx launch $env'"
}

launch() {
  set -x
  echo "Launching CloudStack Zone in the environment:"
  env=$1
  if [ -z $env ]; then
    echo "Please provide a valid env name, run 'mbx list' to find name of environments"
    exit 1
  fi
  id=$(echo $env | sed 's/^qa//g' | sed 's/-.*$//g')
  echo "Generating marvin config for env ID $id"

  msip=$(getent hosts $env-mgmt1 | awk '{ print $1 }')
  sshpass -p 'P@ssword123' scp -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" $ROOT/boxes/$env/marvin.cfg root@$msip:/marvin/
  sshpass -p 'P@ssword123' scp -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" $ROOT/files/smoketests.sh root@$msip:/marvin/
  sshpass -p 'P@ssword123' scp -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" $ROOT/files/result.py root@$msip:/marvin/
  while ! nc -vzw 5 $msip 8096 2>&1 > /dev/null; do echo "Waiting for management server to come up"; sleep 10; done
  sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$msip systemctl start cloudstack-usage
  sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$msip "mysql -u root --execute=\"UPDATE cloud.service_offering set ram_size=512 where vm_type='consoleproxy';\""
  echo "Management server is UP now, launching data center now"

  # Deploy marvin datacenter (tried py2 first, and then py3)
  sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$msip "python /usr/lib/python2.7/site-packages/marvin/deployDataCenter.py -i /marvin/marvin.cfg || python3 /usr/local/lib/python3.6/site-packages/marvin/deployDataCenter.py -i /marvin/marvin.cfg"
  echo "Launched: http://$msip:8080/client"
}

test() {
  set +x
  echo "Please ssh into the env and run: cd /marvin; bash -x smoketests.sh"
  for env in  $(cat $ROOT/boxes/boxes.list); do
    for vm in $(cat $ROOT/boxes/$env/list| grep mgmt1); do
      echo "$env: ssh root@$vm"
    done
  done
}

dev() {
  if [[ "$1" == "-h" ]]; then
    echo "Usage: mbx dev <name of env> <hypervisor template> <storage source>"
    exit 0
  fi

  set -x
  id=
  for idx in {1..9}; do
    if ! grep -q qa$idx- $ROOT/boxes/boxes.list; then
      id=$idx
      break
    fi
  done
  if [ -z $id ]; then
    echo "Unable to deploy an env, all 20 slots full"
    exit 1
  fi

  name=${1:-"mbx-dev"}
  hyt=${2:-"mbxt-kvm-centos7"}
  # Validate input templates
  check_mbxt hypervisor $hyt

  hypervisor=$(echo $hyt |  awk '{print substr($0,6,3)}')
  storage=${3:-"/export/testing/4.15"}
  env="dev$id-$name-$hypervisor"

  echo -e "Building dev env with name: \033[4m$env\033[0m"
  echo "Hypervisor template: $hyt"
  echo "Storage source: $storage"

  mkdir -p $ROOT/boxes/$env
  # Save env name
  echo $env >> $ROOT/boxes/boxes.list

  # Clone hypervisor
  virt-clone --original $hyt --name $env-host1 --file $ROOT/boxes/$env/$env-host1.qcow2
  echo $env-host1 >> $ROOT/boxes/$env/list
  virsh setmaxmem $env-host1 8G --config
  if [[ "$hypervisor" == "vmw" ]]; then
    virsh setmaxmem $env-host1 18G --config
  fi

  echo "Starting VMs"
  for domain in $(cat $ROOT/boxes/$env/list); do virsh start $domain; done;

  echo "Copying primary and secondary storages"
  env_storage="/export/testing/$env/"
  sudo cp -vr $storage $env_storage
  sync
  echo "Primary and secondary storages are ready"

  echo "Initialising dev hosts"
  sleep 60
  for box in $(cat $ROOT/boxes/$env/list); do
    echo "Configuring host $box"
    ip=$(getent hosts $box | awk '{ print $1 }')
    while [ -z $ip ]; do
      echo "Waiting for $box DHCP to kick-in..."
      sleep 10
      ip=$(getent hosts $box | awk '{ print $1 }')
    done
    while ! nc -vzw 10 $ip 22 2>&1 > /dev/null; do echo "Waiting for ssh on $box ($ip) to come up"; sleep 10; done
    echo "$box is UP"
    sleep 5
    # KVM or XenServer/XCP-ng host
    if [[ "$hypervisor" == "kvm" || "$hypervisor" == "xen" || "$hypervisor" == "xcp" ]]; then
      sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$box hostnamectl set-hostname $box
      sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$box "echo $ip $box >> /etc/hosts"
      sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$box "cat /etc/hosts"
      echo "$box hostname fixed"
    fi
    # VMware: Start VC
    if [[ "$hypervisor" == "vmw" && "$box" == "$env-host1" ]]; then
      vcmac=$( (date; cat /proc/interrupts) | md5sum | sed -r 's/^(.{4}).*$/\1/;s/([0-9a-f]{2})/\1:/g;s/^/00:50:56:00:/;s/:$//' )
      if [[ "$hyt" == "mbxt-vmware70u1" ]]; then
        sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$box "echo 'ethernet0.addressType = \"static\"' >> /vmfs/volumes/datastore1/VC/VC.vmx"
        sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$box "echo 'ethernet0.address = \"${vcmac}\"' >> /vmfs/volumes/datastore1/VC/VC.vmx"
      fi
      sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$box vim-cmd vmsvc/getallvms
      sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$box vim-cmd vmsvc/power.on 1
      echo "VC started"
    fi
    # XenServer: Make hosts unique
    if [[ "$hypervisor" == "xen" || "$hypervisor" == "xcp" ]]; then
      if [[ "$box" == "$env-host1" ]]; then
        sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$box "xe host-param-set uuid=\$(xe host-list params=uuid|awk {'print \$5'} | head -n 1) name-label=$env-host1"
      fi
    fi
  done
  # Setup KVM hosts
  if [[ $hypervisor == "kvm" ]]; then
    sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$env-host1 "echo host.reserved.mem.mb=512 >> /etc/cloudstack/agent/agent.properties"
    sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$env-host1 "yum install -y openssh-clients java-11-openjdk libvirt bridge-utils ebtables iptables ethtool net-tools iproute ipset perl python36-libvirt qemu-img qemu-kvm python python3 python3-pip"
  fi
  # Setup xen/xcp hosts
  if [[ $hypervisor == "xen" || $hypervisor == "xcp" ]]; then
    masterip=$(getent hosts $env-host1 | awk '{ print $1 }')
    sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$env-host1 "xe pool-param-set name-label=${env}1 uuid=\$(xe pool-list --minimal)"
  fi

  # Generate marvin config
  msip="172.20.0.1"
  export vlan="$(echo $id*100|bc)-$(echo $id*100+99|bc)"
  export public_start="172.20.$id.1"
  export public_end="172.20.$id.125"
  export pod_start="172.20.$id.126"
  export pod_end="172.20.$id.250"
  export host1=$(getent hosts $env-host1 | awk '{ print $1 }')
  export host2="host2"
  export storage_path="/export/testing/$env"

  if [[ $hypervisor == "xcp" ]]; then
    hypervisor="xen"
  fi

  # Find VC IP
  export vcip=
  if [[ $hypervisor == "vmw" ]]; then
    while : ; do
      vcip=$(sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$env-host1 vim-cmd "vmsvc/get.guest 1 | grep ipAddress | head -1 | sed 's/.*ipAddress = \"//g' | sed 's/\".*//g'")
      if [[ "$vcip" == *"unset"* ]]; then
        echo "Waiting for VC to be UP"
        sleep 5
      else
        echo "VC IP found: $vcip"
        break
      fi
    done
    while [[ "$(curl -sL -w '%{http_code}' https://${vcip}/sdk/vimService.wsdl --insecure -o /dev/null)" != "200" ]]; do
      echo "Waiting for VC vim service to be UP"
      sleep 5
    done
    # Check vim service and add hosts cluster
    $ROOT/files/govc cluster.add -k=true -u=https://administrator@vsphere.local:P@ssword123@$vcip/sdk -cluster "/DC/host/Cluster" -noverify -force -hostname $host1 -username root -password P@ssword123
    echo "Before launching zone, open the VC web UI and reset any warning on the ESXi hosts by clicking 'Reset to Green'"
  fi

  envsubst < $ROOT/marvin/$hypervisor.cfg > $ROOT/boxes/$env/marvin.cfg
  jq "del(.zones|.[0].pods|.[0].clusters|.[0].hosts[1])" $ROOT/boxes/$env/marvin.cfg
  echo "Marvin cfg file: $ROOT/b xes/$env/marvin.cfg"
  echo "Deploy CloudStack db, start jetty using mvn, install/upgrade Marvin and then launch zone using:"
  echo "  python3 tools/marvin/marvin/deployDataCenter.py -i $ROOT/boxes/$env/marvin.cfg"
}

agentscp() {
  if [[ "$1" == "-h" ]]; then
    echo "Usage: mbx agentscp <KVM host IP>"
    exit 0
  fi

  set -x
  kvm_host=$1
  ROOT=$PWD
  echo "[acs agent] Syncing KVM agent changes from development folder to host: $kvm_host"
  sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$kvm_host "mkdir -p /etc/cloudstack/agent/ /usr/share/cloudstack-common/{lib,scripts,vms} /usr/share/cloudstack-agent/{lib,plugins} /var/log/cloudstack/agent/"
  sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$kvm_host "echo 'paths.pid=/var/run' > /etc/cloudstack/agent/environment.properties; echo 'paths.script=/usr/share/cloudstack-common' >> /etc/cloudstack/agent/environment.properties"

  echo "[acs agent] Copied systemvm.iso"
  sshpass -p 'P@ssword123' scp -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" $ROOT/systemvm/dist/systemvm.iso root@$kvm_host:/usr/share/cloudstack-common/vms/

  echo "[acs agent] Syncing python lib changes to host: $kvm_host"
  sshpass -p 'P@ssword123' scp -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" -r $ROOT/python/lib/* root@$kvm_host:/usr/lib64/python2.7/site-packages/ 2>/dev/null || true
  sshpass -p 'P@ssword123' scp -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" -r $ROOT/python/lib/* root@$kvm_host:/usr/lib64/python3.6/site-packages/ 2>/dev/null || true

  echo "[acs agent] Syncing scripts"
  sshpass -p 'P@ssword123' scp -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" -r $ROOT/scripts/* root@$kvm_host:/usr/share/cloudstack-common/scripts/

  echo "[acs agent] Syncing kvm hypervisor jars"
  sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$kvm_host "rm -f /usr/share/cloudstack-agent/lib/*"
  sshpass -p 'P@ssword123' scp -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" -r $ROOT/plugins/hypervisors/kvm/target/*jar root@$kvm_host:/usr/share/cloudstack-agent/lib/
  sshpass -p 'P@ssword123' scp -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" -r $ROOT/plugins/hypervisors/kvm/target/dependencies/*jar root@$kvm_host:/usr/share/cloudstack-agent/lib/

  echo "[acs agent] Syncing cloudstack-agent config and scripts"
  sshpass -p 'P@ssword123' scp -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" $ROOT/agent/target/transformed/log4j-cloud.xml root@$kvm_host:/etc/cloudstack/agent/
  sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$kvm_host "sed -i 's/INFO/DEBUG/g' /etc/cloudstack/agent/log4j-cloud.xml; sed -i 's/logs\/agent.log/\/var\/log\/cloudstack\/agent\/agent.log/g' /etc/cloudstack/agent/log4j-cloud.xml"
  sshpass -p 'P@ssword123' scp -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" $ROOT/agent/target/transformed/libvirtqemuhook root@$kvm_host:/usr/share/cloudstack-agent/lib/
  sshpass -p 'P@ssword123' scp -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" $ROOT/agent/target/transformed/rolling-maintenance root@$kvm_host:/usr/share/cloudstack-agent/lib/
  sshpass -p 'P@ssword123' scp -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" $ROOT/packaging/systemd/cloudstack-agent.default root@$kvm_host:/etc/default/cloudstack-agent
  sshpass -p 'P@ssword123' scp -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" $ROOT/agent/target/transformed/cloudstack-agent-profile.sh root@$kvm_host:/etc/profile.d/cloudstack-agent-profile.sh

  sshpass -p 'P@ssword123' scp -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" $ROOT/agent/target/transformed/cloud-setup-agent root@$kvm_host:/usr/bin/cloudstack-setup-agent
  sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$kvm_host "sed -i 's/@AGENTSYSCONFDIR@/\/etc\/cloudstack\/agent/g' /usr/bin/cloudstack-setup-agent"
  sshpass -p 'P@ssword123' scp -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" $ROOT/agent/target/transformed/cloud-ssh root@$kvm_host:/usr/bin/cloudstack-ssh
  sshpass -p 'P@ssword123' scp -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" $ROOT/agent/target/transformed/cloudstack-agent-upgrade root@$kvm_host:/usr/bin/cloudstack-agent-upgrade
  sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$kvm_host "chmod +x /usr/bin/cloudstack*"

  sshpass -p 'P@ssword123' scp -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" $ROOT/packaging/systemd/cloudstack-agent.service root@$kvm_host:/lib/systemd/system/
  sshpass -p 'P@ssword123' scp -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" $ROOT/packaging/systemd/cloudstack-rolling-maintenance@.service root@$kvm_host:/lib/systemd/system/


  sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no"  root@$kvm_host "systemctl daemon-reload && systemctl status cloudstack-agent && systemctl restart cloudstack-agent"

  echo "[acs agent] Copied all files, KVM agent restarted!"
}

sshp() {
  echo "Trying ssh with root@$1 with password 'P@ssword123'"
  sshpass -p 'P@ssword123' ssh -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@$1
}

stop() {
  env=$1
  if [ -z "$env" ]; then
    echo "Usage: mbx stop <env name>. Please pass a name, run 'mbx list' for list of available envs."
    return
  fi
  sync
  for vm in $(cat $ROOT/boxes/$env/list); do
    sync
    virsh destroy $vm 2>/dev/null || true
  done
}

start() {
  env=$1
  if [ -z "$env" ]; then
    echo "Usage: mbx start <env name>. Please pass a name, run 'mbx list' for list of available envs."
    return
  fi
  for vm in $(cat $ROOT/boxes/$env/list); do
    virsh start $vm 2>/dev/null || true;
  done
}

destroy() {
  env=$1
  if [ -z "$env" ]; then
    echo "Usage: mbx destroy <env name>. Please pass a name, run 'mbx list' for list of available envs."
    return
  fi
  for vm in $(cat $ROOT/boxes/$env/list); do
    virsh destroy $vm 2> /dev/null || true;
    virsh undefine $vm;
  done
  sed -i "/$env/d" $ROOT/boxes/boxes.list
  rm -fr $ROOT/boxes/$env
  sudo rm -fr /export/testing/$env
}

case "$1" in
    help) usage;;
    -h) usage;;
    init) init;;
    list) list;;
    build) build ${@:2};;
    deploy) deploy ${@:2};;
    launch) launch $2;;
    test) test;;
    dev) dev ${@:2};;
    agentscp) agentscp ${@:2};;
    ssh) sshp $2;;
    start) start $2;;
    stop) stop $2;;
    destroy) destroy $2;;
    *) usage;;
esac
